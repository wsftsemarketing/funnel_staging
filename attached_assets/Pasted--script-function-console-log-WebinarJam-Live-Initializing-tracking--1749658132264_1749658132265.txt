<script>
    (function() {
      console.log('[WebinarJam Live] Initializing tracking...');

      // Get cross-domain data from URL params or localStorage (multiple sources)
      const urlParams = new URLSearchParams(window.location.search);
      const storedData = localStorage.getItem('mp_cross_domain_data');
      const wjTrackingData = localStorage.getItem('wj_tracking_data');

      let trackingData = {};

      // Try multiple data sources in priority order
      if (wjTrackingData) {
        try {
          trackingData = JSON.parse(wjTrackingData);
          console.log('[WebinarJam Live] Found WebinarJam tracking data:', trackingData);
        } catch (e) {
          console.warn('[WebinarJam Live] Failed to parse WebinarJam tracking data');
        }
      } else if (storedData) {
        try {
          trackingData = JSON.parse(storedData);
          console.log('[WebinarJam Live] Found cross-domain tracking data:', trackingData);
        } catch (e) {
          console.warn('[WebinarJam Live] Failed to parse stored tracking data');
        }
      }

      // Override with URL params if available
      ['mp_id', 'mp_session', 'mp_source', 'mp_medium', 'mp_campaign', 'mp_term', 'mp_content', 'mp_utm_id', 'mp_gclid', 'mp_fbclid', 'mp_tag', 'mp_hyros_tag'].forEach(param => {
        const value = urlParams.get(param);
        if (value) trackingData[param] = value;
      });

      console.log('[WebinarJam Live] Final tracking data:', trackingData);

      // Load Mixpanel
      (function(f,b){if(!b.__SV){var e,g,i,h;window.mixpanel=b;b._i=[];b.init=function(e,f,c){function g(a,d){var b=d.split(".");2==b.length&&(a=a[b[0]],d=b[1]);a[d]=function(){a.push([d].concat(Array.prototype.slice.call(arguments,0)))}}var a=b;"undefined"!==typeof c?a=b[c]=[]:c="mixpanel";a.people=a.people||[];a.toString=function(a){var d="mixpanel";"mixpanel"!==c&&(d+="."+c);a||(d+=" (stub)");return d};a.people.toString=function(){return a.toString(1)+".people (stub)"};i="disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking start_batch_senders people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(" ");for(h=0;h<i.length;h++)g(a,i[h]);var j="set set_once union unset remove delete".split(" ");a.get_group=function(){function b(c){d[c]=function(){call2_args=arguments;call2=[c].concat(Array.prototype.slice.call(call2_args,0));a.push([e,call2])}}for(var d={},e=["get_group"].concat(Array.prototype.slice.call(arguments,0)),c=0;c<j.length;c++)b(j[c]);return d};b._i.push([e,f,c])};b.__SV=1.2;e=f.createElement("script");e.type="text/javascript";e.async=!0;e.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===f.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";g=f.getElementsByTagName("script")[0];g.parentNode.insertBefore(e,g)}})(document,window.mixpanel||[]);
      
      // Initialize Mixpanel
      window.mixpanel.init('${MIXPANEL_TOKEN}', {
        debug: false,
        track_pageview: false,
        persistence: 'localStorage'
      });

      // Wait for Mixpanel to be ready
      const initializeTracking = () => {
        if (typeof mixpanel !== 'undefined' && mixpanel.track) {
          console.log('[WebinarJam Live] Mixpanel loaded successfully');

          // CRITICAL: Identify the same user to maintain identity chain
          if (trackingData.mp_id) {
            mixpanel.identify(trackingData.mp_id);
            console.log('[WebinarJam Live] User identified with existing ID:', trackingData.mp_id);
          }

          // Register UTM properties for all future events
          const utmProperties = {};
          if (trackingData.mp_source) utmProperties.utm_source = trackingData.mp_source;
          if (trackingData.mp_medium) utmProperties.utm_medium = trackingData.mp_medium;
          if (trackingData.mp_campaign) utmProperties.utm_campaign = trackingData.mp_campaign;
          if (trackingData.mp_term) utmProperties.utm_term = trackingData.mp_term;
          if (trackingData.mp_content) utmProperties.utm_content = trackingData.mp_content;
          if (trackingData.mp_utm_id) utmProperties.utm_id = trackingData.mp_utm_id;
          if (trackingData.mp_gclid) utmProperties.gclid = trackingData.mp_gclid;
          if (trackingData.mp_fbclid) utmProperties.fbclid = trackingData.mp_fbclid;
          if (trackingData.mp_tag) utmProperties.tag = trackingData.mp_tag;
          if (trackingData.mp_hyros_tag) utmProperties.hyros_tag = trackingData.mp_hyros_tag;

          if (Object.keys(utmProperties).length > 0) {
            mixpanel.register(utmProperties);
            console.log('[WebinarJam Live] UTM properties registered:', utmProperties);
          }

          // Track webinar join with preserved user identity and UTM data
          mixpanel.track('Webinar Joined', {
            step_name: 'Webinar Joined',
            step_order: 4,
            funnel_type: 'webinar_registration',
            webinar_url: window.location.href,
            session_id: trackingData.mp_session || 'unknown',
            user_id: trackingData.mp_id || 'unknown',
            utm_source: trackingData.mp_source || 'direct',
            utm_medium: trackingData.mp_medium || 'organic',
            utm_campaign: trackingData.mp_campaign || 'webinar',
            utm_term: trackingData.mp_term,
            utm_content: trackingData.mp_content,
            utm_id: trackingData.mp_utm_id,
            gclid: trackingData.mp_gclid,
            fbclid: trackingData.mp_fbclid,
            tag: trackingData.mp_tag,
            hyros_tag: trackingData.mp_hyros_tag,
            has_utms: Object.keys(utmProperties).length > 0,
            timestamp: new Date().toISOString()
          });

          // Also track as Funnel Step for consistency
          mixpanel.track('Funnel Step', {
            step_name: 'Webinar Joined',
            step_order: 4,
            funnel_type: 'webinar_registration',
            webinar_url: window.location.href,
            session_id: trackingData.mp_session || 'unknown',
            user_id: trackingData.mp_id || 'unknown',
            utm_source: trackingData.mp_source || 'direct',
            utm_medium: trackingData.mp_medium || 'organic',
            utm_campaign: trackingData.mp_campaign || 'webinar',
            utm_term: trackingData.mp_term,
            utm_content: trackingData.mp_content,
            utm_id: trackingData.mp_utm_id,
            gclid: trackingData.mp_gclid,
            fbclid: trackingData.mp_fbclid,
            tag: trackingData.mp_tag,
            hyros_tag: trackingData.mp_hyros_tag,
            has_utms: Object.keys(utmProperties).length > 0,
            timestamp: new Date().toISOString()
          });

          console.log('[WebinarJam Live] Webinar join tracked with preserved user identity and UTM data');

          // Track WTP Ticket button clicks
          const trackWTPButton = () => {
            // Multiple selectors to find the WTP button
            const selectors = [
              'a[href*="pauls-evergreen-cpb-99-webinar"]',
              'a[href*="utm_source=auto-webinar"]',
              'a.btn-success',
              'a.btn[href*="touchstoneeducation.com"]',
              'button[onclick*="redirect"]'
            ];

            let wtpButton = null;
            for (const selector of selectors) {
              wtpButton = document.querySelector(selector);
              if (wtpButton) break;
            }

            // Also search by text content
            if (!wtpButton) {
              const allLinks = document.querySelectorAll('a, button');
              for (const el of allLinks) {
                const text = el.textContent?.toLowerCase() || '';
                if (text.includes('wtp ticket') || text.includes('yes, i want') || text.includes('get my ticket')) {
                  wtpButton = el;
                  break;
                }
              }
            }

            if (wtpButton && !wtpButton.hasAttribute('data-wtp-tracked')) {
              wtpButton.setAttribute('data-wtp-tracked', 'true');
              
              wtpButton.addEventListener('click', (e) => {
                console.log('[WebinarJam Live] WTP Ticket button clicked');
                
                const eventData = {
                  step_name: 'WTP Ticket Offer Clicked',
                  step_order: 6,
                  funnel_type: 'webinar_registration',
                  button_text: wtpButton.textContent?.trim() || 'WTP Ticket Button',
                  button_href: wtpButton.href || wtpButton.getAttribute('onclick') || '',
                  session_id: trackingData.mp_session || 'unknown',
                  user_id: trackingData.mp_id || 'unknown',
                  utm_source: trackingData.mp_source || 'direct',
                  utm_medium: trackingData.mp_medium || 'organic',
                  utm_campaign: trackingData.mp_campaign || 'webinar',
                  utm_term: trackingData.mp_term,
                  utm_content: trackingData.mp_content,
                  utm_id: trackingData.mp_utm_id,
                  gclid: trackingData.mp_gclid,
                  fbclid: trackingData.mp_fbclid,
                  tag: trackingData.mp_tag,
                  hyros_tag: trackingData.mp_hyros_tag,
                  timestamp: new Date().toISOString(),
                  page_url: window.location.href
                };

                // Track main event
                mixpanel.track('WTP Ticket Clicked', eventData);

                // Track as funnel step
                mixpanel.track('Funnel Step', eventData);

                console.log('[WebinarJam Live] WTP Ticket events tracked:', eventData);
              });

              console.log('[WebinarJam Live] WTP button tracking attached to:', wtpButton);
            }
          };

          // Initial check for WTP button
          trackWTPButton();

          // Monitor for dynamic content (WTP button might appear later)
          const observer = new MutationObserver(() => {
            trackWTPButton();
          });

          observer.observe(document.body, {
            childList: true,
            subtree: true
          });

          // Track video progress if available
          let lastProgressTracked = 0;
          const trackProgress = () => {
            // Try to get video element (WebinarJam uses various video players)
            const video = document.querySelector('video') || 
                         document.querySelector('.vjs-tech') ||
                         document.querySelector('[data-testid="video"]');

            if (video && video.duration && video.currentTime) {
              const progress = Math.round((video.currentTime / video.duration) * 100);

              // Track every 25% milestone
              const milestones = [25, 50, 75, 90, 100];
              milestones.forEach(milestone => {
                if (progress >= milestone && lastProgressTracked < milestone) {
                  mixpanel.track('Video Progress', {
                    progress_percent: milestone,
                    watch_time_seconds: Math.round(video.currentTime),
                    session_id: trackingData.mp_session || 'unknown',
                    user_id: trackingData.mp_id || 'unknown',
                    funnel_step: 5,
                    event_type: 'video_progress',
                    utm_source: trackingData.mp_source || 'direct',
                    utm_medium: trackingData.mp_medium || 'organic',
                    utm_campaign: trackingData.mp_campaign || 'webinar',
                    utm_term: trackingData.mp_term,
                    utm_content: trackingData.mp_content,
                    utm_id: trackingData.mp_utm_id,
                    gclid: trackingData.mp_gclid,
                    fbclid: trackingData.mp_fbclid,
                    tag: trackingData.mp_tag,
                    hyros_tag: trackingData.mp_hyros_tag
                  });

                  console.log('[WebinarJam Live] Video progress tracked:', milestone + '%');
                  lastProgressTracked = milestone;
                }
              });
            }
          };

          // Check for video progress every 30 seconds
          setInterval(trackProgress, 30000);

          // Cleanup on page unload
          window.addEventListener('beforeunload', () => {
            trackProgress(); // Final progress check
            observer.disconnect();
            mixpanel.track('Webinar Session End', {
              session_id: trackingData.mp_session || 'unknown',
              user_id: trackingData.mp_id || 'unknown',
              final_progress: lastProgressTracked,
              utm_source: trackingData.mp_source || 'direct',
              utm_medium: trackingData.mp_medium || 'organic',
              utm_campaign: trackingData.mp_campaign || 'webinar',
              utm_term: trackingData.mp_term,
              utm_content: trackingData.mp_content,
              utm_id: trackingData.mp_utm_id,
              gclid: trackingData.mp_gclid,
              fbclid: trackingData.mp_fbclid,
              tag: trackingData.mp_tag,
              hyros_tag: trackingData.mp_hyros_tag
            });
          });

        } else {
          console.log('[WebinarJam Live] Mixpanel not ready, retrying...');
          setTimeout(initializeTracking, 500);
        }
      };

      // Start initialization
      setTimeout(initializeTracking, 1000);

    })();
    </script>